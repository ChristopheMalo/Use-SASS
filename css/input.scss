$versionFile: 0.2.0;
/**
* Exemples on how to use SASS
* 
* @author: Christophe Malo
* @version: #{$versionFile}
*/
// This file shows how to use Sass
// The syntax is SCSS - not SASS
// import partial _reset -> that means _reset.css is not created 
@import 'reset';

// Variables (Comment just for Scss file)
$global-font: Helvetica, sans-serif;

$bgColor1: #FFD;
$bgColor2: #FF0;
$darkColor: #000;
$firstColor: #CCC;
$messageColor: #304C29;
$pColor: #83021F;
$titleColor: #454545;

$distance: 30px;
$mediumBorder: 4px;
$thinBorder: 1px;

// Mixins
@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
       -moz-border-radius: $radius;
        -ms-border-radius: $radius;
            border-radius: $radius;
}

@mixin square-box($size) {
    height: $size;
    width: $size;
}

/* Use variable */
body {
    background: $firstColor;
    font: 100% $global-font;
    margin: $distance;
}
h1 {
    color: $titleColor;
}
p {
    color: $pColor;
}

.clear { clear: both; }

/* Nesting */
nav {
    ul {
        /*margin: 0;
        padding: 0;*/
        list-style: none;
    }
    li {
        display: inline-block;
    }
    a {
        display: block;
        padding: 6px 12px;
        text-decoration: none;
    }
}

#main {
    // Declare global variable
    $borderOne: $thinBorder solid $darkColor !global;
    border: $borderOne;
    width: 90%;
    
    div {
        p {
            font-size: 2em;
            a {
                font-weight: bold;
            }
        }
    }
    
    pre { font-size: 3em; }
}

/* Referencing Parent Selectors: & */
#parent {
    // use $borderOne global
    border: $borderOne;
    color: $darkColor;
    a {
        font-weight: bold;
        &:hover { color: $pColor; }
    }
}

/* Nested properties with namespace */
.testNamespace {
    font: {
        family: Arial;
        size: 3em;
        weight: bold;
    }
}

/* use mixins */
.displayBox {
    border: $mediumBorder solid $darkColor;
    @include border-radius(10px);
    @include square-box(100px); 
}

/* Grid with operator */
.container {
    border: $borderOne;
    width: 100%
}

article[role="main"] {
    border: $borderOne;
    float: left;
    width: 600px / 960px * 100%;
}

aside[role="complementary"] {
    border: $borderOne;
    float: right;
    width: 300px / 960px * 100%;
}

/* Use interpolation */
$className: interpolation;
$attrSize: size;
$attrHeight: height;

p.#{$className} {
    $font-size: 15px;
    $line-height: 30px;
    font-#{$attrSize}: #{$font-size};
    line-#{$attrHeight}: #{$line-height};
}

/* use nested import rule */
body {
    @import 'specificBlock';
}

/* Use nested media rule */
.simpleBox1 {
    border: $borderOne;
    height: 100px;
    width: 50%;
    @media screen and (orientation: landscape) {
        width: 100%;
    }
}

/* two nested media */
@media screen {
    .simpleBox2 {
        @media (orientation: landscape) {
            border: $borderOne;
            @include square-box(300px);
        }
    }
}

/* Extend / Inheritance rule */
/* Simple extend */
.message {
    border: $mediumBorder solid $darkColor;
    margin: 10px;
    padding: 10px;
    
    p {
        color: $messageColor;
    }
}

.success {
    @extend .message;
    border-color: #299A0B;
}

.error {
    @extend .message;
    border-color: #C9224E;
}

.warning {
    @extend .message;
    border-color: #D1C300;
}

/* Another example */
.error2 {
    border: $thinBorder solid darkmagenta;
    background-color: $bgColor1;
}

.error2.intrusion {
    font-weight: bold;
}

.importantError {
    @extend .error2;
    border-width: $mediumBorder;
}

/* Extends complex selectors */
.hoverlink {
    @extend a:hover;
}

.comment a.user:hover {
    font-weight: bold;
}

a:hover {
    text-decoration: none;
}

/* Multiple extends */
.error3 {
    border: $borderOne;
    background-color: $bgColor1;
}
.warning3 {
    font-size: 3em;
    background-color: $bgColor2;
}
.criticalError {
    @extend .error3;
    @extend .warning3;
    border-width: $mediumBorder;
}


/* Extend test without HTML part */
/* Selector sequences */
#test-links .linkTest {
    @extend a;
}

a {
    color: blue;
    &:hover {
        text-decoration: underline;
    }
}

/* Merging selector */
#admin .navbar a {
    font-weight: bold;
}

#adminArea .userClass .addLink {
    @extend a;
}

/* Extend only selector */
// This is not rendered in css file
#context i%testSelect {
    color: magenta;
    font-weight: bold;
    font-size: 2em;
}

// This is rendered
.renderSelect {
    @extend %testSelect;
}

/* not produce selector if error or does not exist - use optional */
.optional {
    color: red;
    font-size: 2em;
}
// optional2 doesn't exist
#test.important {
    @extend .optional2 !optional;
}

/* Extends in directives */
// This works fine
@media print {
    .class1 {
        border: $borderOne;
        background-color: $bgColor1;
    }
    
    .class2 {
        @extend .class1;
        border-width: $mediumBorder;
    }
}

/*
 * This is not work fine and generate error
 * Because the extend is outside the directive print
@media print {
    .class3 {
        border: $borderOne;
        background-color: $bgColor1;
    }
    .classError4 {
        @extend .error;
    }
}
*/

/* Use @at-root directive */
/* with out @at-root */
.parent1 {
    font-weight: bold;
    .child1 {border: $borderOne;}
    .child2 {background-color: $bgColor1;}
    .step-child {border-width: $mediumBorder;}
}
/* with @at-root */
.parent1 {
    font-weight: bold;
    @at-root {
        .child1 {border: $borderOne;}
        .child2 {background-color: $bgColor1;}
    }
    .step-child {border-width: $mediumBorder;}
}

/* Debug, warn and error directives */
// Return  - numberline DEBUG: 44em - in console
// @debug 10em +34em;


/* Control directives & expressions */
/* @if directive */
p.dir1 {
    @if 1 + 1 == 2 { border: 1px solid;  }
    @if 5 < 3      { border: 2px dotted; }
    @if null       { border: 3px double; }
}

$type: monster;
p.dir2 {
    @if $type == ocean {
        color: blue;
    } @else if $type == matador {
        color: red;
    } @else if $type == monster {
        color: green;
    } @else {
        color: black;
    }
}

/* @for directive */
@for $i from 1 through 3 {
    .item-#{$i} { width: 2em * $i; }
}

/* @each directive */
@each $animal in puma, sea-slug, egret, salamander {
    .#{$animal}-icon {
        background-image: url('/images/#{$animal}.png');
    }
}

/* @each directive with multiple assignment */
@each $animal, $color, $cursor in (puma, black, default),
                                  (sea-slug, blue, pointer),
                                  (egret, white, move) {
  .#{$animal}-icon {
        background-image: url('/images/#{$animal}.png');
        border: 2px solid $color;
        cursor: $cursor;
  }
}

/* @each directive with mutiple assignment (maps - list of pairs) */
@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {
  #{$header} {
        font-size: $size;
  }
}

/* @while directive */
$i: 6;
@while $i > 0 {
    .item-#{$i} { width: 2em * $i; }
    $i: $i - 2;
}


/* Some mixins -with @mixin directive */
@mixin large-text {
    font: {
        family: Arial;
        size: 20px;
        weight: bold;
    }
    color: #ff0000;
}

// Include mixin large-text or large_text are same
.page-title {
    @include large-text;
    padding: 4px;
    margin-top: 10px;
}


// mixin with selector mixed with properties
@mixin clearfix {
    display: inline-block;
    &:after {
      content: ".";
        display: block;
        height: 0;
        clear: both;
        visibility: hidden;
    }
    * html & { height: 1px }
}

// include mixin
.myClearfix {
    @include clearfix;
}


// This mixin is include outside the rule
@mixin silly-links {
    .aClass {
        color: blue;
        background-color: red;
    }
}

@include silly-links;


// Arguments and @mixin
@mixin sexy-border($color, $width) {
    border: {
        color: $color;
        width: $width;
        style: dashed;
    }
}

.pClass { @include sexy-border(blue, 1in); }

// Omit parameter - use  default argument
@mixin sexy-border($color, $width: 1in) {
    border: {
        color: $color;
        width: $width;
        style: dashed;
    }
}

// include omit arguments
.pClass2 { @include sexy-border(blue); }
.h2Class2 { @include sexy-border(blue, 2in); }

// include with keyword arguments - easier to read
.pClass3 { @include sexy-border($color: blue); }
.h2Class3 { @include sexy-border($color: blue, $width: 2in); }


// Unknow number arguments - use the ... - utils when there are a lots of arguments
@mixin box-shadow($shadows...) {
    -moz-box-shadow: $shadows;
    -webkit-box-shadow: $shadows;
    box-shadow: $shadows;
}

.shadows {
  @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);
}


// keyword arguments
@mixin colors($text, $background, $border) {
    color: $text;
    background-color: $background;
    border-color: $border;
}

$values: #ff0000, #00ff00, #0000ff;
.primary {
    @include colors($values...);
}

// a map (list of pairs)
$value-map: (text: #00ff00, background: #0000ff, border: #ff0000);
.secondary {
    @include colors($value-map...);
}

// Passing content blocks to a mixin
@mixin apply-to-ie6-only {
  * html {
    @content // @content directive
  }
}
@include apply-to-ie6-only {
  #logo {
    background-image: url(/logo.gif);
  }
}

// Variable scope and content blocks
$color: white;
@mixin colors($color: blue) {
  background-color: $color;
  @content;
  border-color: $color;
}
.colors {
  @include colors { color: $color; }
}
